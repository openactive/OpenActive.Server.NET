<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenActive.Server.NET</name>
    </assembly>
    <members>
        <member name="T:OpenActive.Server.NET.CustomBooking.CustomBookingEngine">
            <summary>
            The AbstractBookingEngine provides a simple, basic and extremely flexible implementation of Open Booking API.
            
            It is designed for systems where their needs are not met by StoreBookingEngine to provide a solid foundation for their implementations.
            
            Methods of this class will return OpenActive POCO models that can be rendered using ToOpenActiveString(),
            and throw exceptions that subclass OpenActiveException, on which GetHttpStatusCode() and ToOpenActiveString() can
            be called to construct a response.
            </summary>
        </member>
        <member name="M:OpenActive.Server.NET.CustomBooking.CustomBookingEngine.#ctor(OpenActive.Server.NET.OpenBookingHelper.BookingEngineSettings,OpenActive.DatasetSite.NET.DatasetSiteGeneratorSettings)">
            <summary>
            In this mode, the Booking Engine also handles generation of open data feeds and the dataset site
            
            Note this is also the mode used by the StoreBookingEngine
            
            In order to use RenderDatasetSite, DatasetSiteGeneratorSettings must be provided
            </summary>
            <param name="settings"></param>
            <param name="datasetSettings"></param>
        </member>
        <member name="M:OpenActive.Server.NET.CustomBooking.CustomBookingEngine.#ctor(OpenActive.Server.NET.OpenBookingHelper.BookingEngineSettings,System.Uri,System.Uri)">
            <summary>
            In this mode, the Booking Engine additionally handles generation of open data feeds, but the dataset site is handled manually
            
            In order to generate open data RPDE pages, OpenDataFeedBaseUrl must be provided
            </summary>
            <param name="settings"></param>
            <param name="openBookingAPIBaseUrl"></param>
            <param name="openDataFeedBaseUrl"></param>
        </member>
        <member name="M:OpenActive.Server.NET.CustomBooking.CustomBookingEngine.#ctor(OpenActive.Server.NET.OpenBookingHelper.BookingEngineSettings,System.Uri)">
            <summary>
            In this mode, the Booking Engine does not handle open data feeds or dataset site rendering, and these must both be handled manually
            </summary>
            <param name="settings"></param>
            <param name="openBookingAPIBaseUrl"></param>
        </member>
        <member name="M:OpenActive.Server.NET.CustomBooking.CustomBookingEngine.RenderDatasetSite">
            <summary>
            Handler for Dataset Site endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.CustomBooking.CustomBookingEngine.GetOpenDataRPDEPageForFeed(System.String,System.String,System.String,System.String)">
            <summary>
            Handler for an RPDE endpoint - string only version
            Designed to be used on a single controller method with a "feedname" parameter,
            for uses in situations where the framework does not automatically validate numeric values
            </summary>
            <param name="feedname">The final component of the path of the feed, i.e. https://example.com/feeds/{feedname} </param>
            <param name="afterTimestamp">The "afterTimestamp" parameter from the URL</param>
            <param name="afterId">The "afterId" parameter from the URL</param>
            <param name="afterChangeNumber">The "afterChangeNumber" parameter from the URL</param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.CustomBooking.CustomBookingEngine.GetOpenDataRPDEPageForFeed(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64})">
            <summary>
            Handler for an RPDE endpoint
            Designed to be used on a single controller method with a "feedname" parameter,
            for uses in situations where the framework does not automatically validate numeric values
            </summary>
            <param name="feedname">The final component of the path of the feed, i.e. https://example.com/feeds/{feedname} </param>
            <param name="afterTimestamp">The "afterTimestamp" parameter from the URL</param>
            <param name="afterId">The "afterId" parameter from the URL</param>
            <param name="afterChangeNumber">The "afterChangeNumber" parameter from the URL</param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.CustomBooking.CustomBookingEngine.RouteOpenDataRPDEPageForFeed(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64})">
            <summary>
            Handler for an RPDE endpoint
            Designed to be used on a single controller method with a "feedname" parameter
            </summary>
            <param name="feedname">The final component of the path of the feed, i.e. https://example.com/feeds/{feedname} </param>
            <param name="afterTimestamp">The "afterTimestamp" parameter from the URL</param>
            <param name="afterId">The "afterId" parameter from the URL</param>
            <param name="afterChangeNumber">The "afterChangeNumber" parameter from the URL</param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.CustomBooking.CustomBookingEngine.GetOrdersRPDEPageForFeed(System.String,System.String,System.String,System.String)">
            <summary>
            Handler for an Orders RPDE endpoint (separate to the open data endpoint for security) - string only version
            for uses in situations where the framework does not automatically validate numeric values
            </summary>
            <param name="clientId">Token designating the specific authenticated party for which the feed is intended</param>
            <param name="afterTimestamp">The "afterTimestamp" parameter from the URL</param>
            <param name="afterId">The "afterId" parameter from the URL</param>
            <param name="afterChangeNumber">The "afterChangeNumber" parameter from the URL</param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.CustomBooking.CustomBookingEngine.GetOrdersRPDEPageForFeed(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64})">
            <summary>
            Handler for an Orders RPDE endpoint (separate to the open data endpoint for security)
            For uses in situations where the framework does not automatically validate numeric values
            </summary>
            <param name="clientId">Token designating the specific authenticated party for which the feed is intended</param>
            <param name="afterTimestamp">The "afterTimestamp" parameter from the URL</param>
            <param name="afterId">The "afterId" parameter from the URL</param>
            <param name="afterChangeNumber">The "afterChangeNumber" parameter from the URL</param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.CustomBooking.CustomBookingEngine.GetOrderProposalsRPDEPageForFeed(System.String,System.String,System.String,System.String)">
            <summary>
            Handler for an Order Proposals RPDE endpoint (separate to the open data endpoint for security) - string only version
            for uses in situations where the framework does not automatically validate numeric values
            </summary>
            <param name="clientId">Token designating the specific authenticated party for which the feed is intended</param>
            <param name="afterTimestamp">The "afterTimestamp" parameter from the URL</param>
            <param name="afterId">The "afterId" parameter from the URL</param>
            <param name="afterChangeNumber">The "afterChangeNumber" parameter from the URL</param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.CustomBooking.CustomBookingEngine.GetOrderProposalsRPDEPageForFeed(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64})">
            <summary>
            Handler for an Order Proposals RPDE endpoint (separate to the open data endpoint for security)
            For uses in situations where the framework does not automatically validate numeric values
            </summary>
            <param name="clientId">Token designating the specific authenticated party for which the feed is intended</param>
            <param name="afterTimestamp">The "afterTimestamp" parameter from the URL</param>
            <param name="afterId">The "afterId" parameter from the URL</param>
            <param name="afterChangeNumber">The "afterChangeNumber" parameter from the URL</param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.CustomBooking.CustomBookingEngine.RenderOrdersRPDEPageForFeed(OpenActive.Server.NET.OpenBookingHelper.OrderType,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64})">
            <summary>
            Handler for Orders RPDE endpoint
            </summary>
            <param name="feedType">Type of feed to render</param>
            <param name="clientId">Token designating the specific authenticated party for which the feed is intended</param>
            <param name="afterTimestamp">The "afterTimestamp" parameter from the URL</param>
            <param name="afterId">The "afterId" parameter from the URL</param>
            <param name="afterChangeNumber">The "afterChangeNumber" parameter from the URL</param>
            <returns></returns>
        </member>
        <member name="T:OpenActive.Server.NET.IBookingEngine">
            <summary>
            This is the interface between the BookingEngine and the Web Framework (e.g. ASP.NET Core).
            
            Note that this interface expects JSON requests to be supplied as strings, and provides JSON responses as strings.
            This ensures that deserialisation is always correct, regardless of the configuration of the web framework.
            It also removes the need to expose OpenActive (de)serialisation settings and parsers to the implementer, and makes
            this interface more maintainble as OpenActive.NET will likely upgrade to use the new System.Text.Json in time.
            </summary>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.AuthenticationExtensions.GetSub(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the "sub" claim from the JWT
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.AuthenticationExtensions.GetClientId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the ClientId custom claim from the JWT
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.AuthenticationExtensions.GetSellerId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the SellerId custom claim from the JWT
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.AuthenticationExtensions.GetCustomerAccountId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the GetCustomerAccountId custom claim from the JWT
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.AuthenticationExtensions.GetAccessTokenOpenBookingClaims(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the SellerId and ClientId custom claims from the JWT
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.AuthenticationExtensions.GetClientIdFromAccessToken(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the ClientId custom claim from the JWT
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.AuthenticationTestHeaders.ClientId">
            <summary>
            Test Interface Booking Partner Client Id Header
            </summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.AuthenticationTestHeaders.SellerId">
            <summary>
            Test Interface Seller Id Header
            </summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OpenActiveCustomClaimNames.ClientId">
            <summary>
            Client Id Custom Claim Name
            </summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OpenActiveCustomClaimNames.SellerId">
            <summary>
            Seller Id Custom Claim Name
            </summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OpenActiveCustomClaimNames.CustomerAccountId">
            <summary>
            Customer Account Id Custom Claim Name
            </summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OpenActiveScopes.OrdersFeed">
            <summary>
            Orders Feed endpoint scope
            </summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OpenActiveScopes.OpenBooking">
            <summary>
            Open Booking endpoint scope
            </summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OpenActiveScopes.SellerIdentity">
            <summary>
            Seller identity scope
            </summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OpenActiveScopes.CustomerAccountModify">
            <summary>
            Customer Account endpoint scope
            </summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OpenActiveScopes.CustomerAccountQuery">
            <summary>
            Customer Accoun query endpoint scope
            </summary>
        </member>
        <member name="T:OpenActive.Server.NET.OpenBookingHelper.ResponseContent">
            <summary>
            This is a .NET version agnostic representation of a result from the Booking Engine
            It includes a .NET version-specific helper functions that simplify integration with .NET Framework MVC
            A .NET Core MVC helper extension is also available at TODO: [Add URL]
            </summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.ClientRegistrationSerializer.SerializerSettings">
            <summary>
            Serializer settings used when deserializing.
            </summary>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.ClientRegistrationSerializer.Serialize``1(``0)">
            <summary>
            Returns the JSON representation of a ClientRegistrationModel.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the JSON representation of the ClientRegistrationModel.
            </returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.ClientRegistrationSerializer.Deserialize``1(System.String)">
            <summary>
            Returns a strongly typed model of the JSON representation provided.
            
            Note this will return null if the deserialized JSON-LD class cannot be assigned to `T`.
            </summary>
            <typeparam name="T">ClientRegistrationModel to deserialize</typeparam>
            <param name="str">JSON string</param>
            <returns>Strongly typed ClientRegistrationModel</returns>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OidcConstants.StandardScopes.OpenId">
            <summary>REQUIRED. Informs the Authorization Server that the Client is making an OpenID Connect request. If the <c>openid</c> scope value is not present, the behavior is entirely unspecified.</summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OidcConstants.StandardScopes.Profile">
            <summary>OPTIONAL. This scope value requests access to the End-User's default profile Claims, which are: <c>name</c>, <c>family_name</c>, <c>given_name</c>, <c>middle_name</c>, <c>nickname</c>, <c>preferred_username</c>, <c>profile</c>, <c>picture</c>, <c>website</c>, <c>gender</c>, <c>birthdate</c>, <c>zoneinfo</c>, <c>locale</c>, and <c>updated_at</c>.</summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OidcConstants.StandardScopes.Email">
            <summary>OPTIONAL. This scope value requests access to the <c>email</c> and <c>email_verified</c> Claims.</summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OidcConstants.StandardScopes.Address">
            <summary>OPTIONAL. This scope value requests access to the <c>address</c> Claim.</summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OidcConstants.StandardScopes.Phone">
            <summary>OPTIONAL. This scope value requests access to the <c>phone_number</c> and <c>phone_number_verified</c> Claims.</summary>
        </member>
        <member name="F:OpenActive.Server.NET.OpenBookingHelper.OidcConstants.StandardScopes.OfflineAccess">
            <summary>This scope value MUST NOT be used with the OpenID Connect Implicit Client Implementer's Guide 1.0. See the OpenID Connect Basic Client Implementer's Guide 1.0 (http://openid.net/specs/openid-connect-implicit-1_0.html#OpenID.Basic) for its usage in that subset of OpenID Connect.</summary>
        </member>
        <member name="T:OpenActive.Server.NET.OpenBookingHelper.InternalOpenBookingException">
             <summary>
             All internal errors, caused by unexpected system behaviour, thrown within OpenActive.Server.NET will subclass InternalOpenBookingException,
             This allows them to be caught and logged separately to OpenBookingException.
            
             The InternalOpenBookingError classes from OpenActive.NET provide OpenActive-compliant names and response codes
             </summary>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.InternalOpenBookingException.#ctor(OpenActive.NET.InternalOpenBookingError)">
             <summary>
             Create an InternalOpenBookingError
            
             Note that error.Name and error.StatusCode are set automatically by OpenActive.NET for each error type.
             </summary>
             <param name="error">The appropriate InternalOpenBookingError</param>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.InternalOpenBookingException.#ctor(OpenActive.NET.InternalOpenBookingError,System.String)">
             <summary>
             Create an InternalOpenBookingError with a message specific to the instance of the problem
            
             Note that error.Name and error.StatusCode are set automatically by OpenActive.NET for each error type.
             </summary>
             <param name="error">The appropriate InternalOpenBookingError</param>
             <param name="message">A message that overwrites the the `Description` property of the supplied error</param>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.InternalOpenBookingException.#ctor(OpenActive.NET.InternalOpenBookingError,System.String,System.Exception)">
             <summary>
             Create an InternalOpenBookingError with a message specific to the instance of the problem, while maintaining any source exception.
            
             Note that error.Name and error.StatusCode are set automatically by OpenActive.NET for each error type.
             </summary>
             <param name="error">The appropriate InternalOpenBookingError</param>
             <param name="message">A message that overwrites the the `Description` property of the supplied error</param>
             <param name="innerException">The source exception</param>
        </member>
        <member name="T:OpenActive.Server.NET.OpenBookingHelper.OpenBookingException">
            <summary>
            All errors thrown within OpenActive.Server.NET will subclass OpenBookingException,
            Which allows them to be rendered as a reponse using ToOpenActiveString() and GetHttpStatusCode().
            
            The OpenBookingError classes from OpenActive.NET provide OpenActive-compliant names and response codes
            </summary>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.OpenBookingException.#ctor(OpenActive.NET.OpenBookingError)">
            <summary>
            Create an OpenBookingError
            
            Note that error.Name and error.StatusCode are set automatically by OpenActive.NET for each error type.
            </summary>
            <param name="error">The appropriate OpenBookingError</param>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.OpenBookingException.#ctor(OpenActive.NET.OpenBookingError,System.String)">
            <summary>
            Create an OpenBookingError with a message specific to the instance of the problem
            
            Note that error.Name and error.StatusCode are set automatically by OpenActive.NET for each error type.
            </summary>
            <param name="error">The appropriate OpenBookingError</param>
            <param name="message">A message that overwrites the the `Description` property of the supplied error</param>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.OpenBookingException.#ctor(OpenActive.NET.OpenBookingError,System.String,System.Exception)">
            <summary>
            Create an OpenBookingError with a message specific to the instance of the problem, while maintaining any source exception.
            
            Note that error.Name and error.StatusCode are set automatically by OpenActive.NET for each error type.
            </summary>
            <param name="error">The appropriate OpenBookingError</param>
            <param name="message">A message that overwrites the the `Description` property of the supplied error</param>
            <param name="innerException">The source exception</param>
        </member>
        <member name="P:OpenActive.Server.NET.OpenBookingHelper.OpenBookingException.ResponseJson">
            <summary>
            Serialised the associated error to OpenActive compliant s JSON-LD
            
            TODO: Should this just return the type, to allow it to be serialised by the application? Requires json type
            </summary>
            <returns>OpenActive compliant serialised JSON-LD</returns>
        </member>
        <member name="P:OpenActive.Server.NET.OpenBookingHelper.OpenBookingException.HttpStatusCode">
            <summary>
            Get the HTTP status code assocaited with this error
            </summary>
            <returns>Associated status code</returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.Extensions.ValueTaskSyncCheckers.CheckSyncValueTaskWorked(System.Threading.Tasks.ValueTask)">
            <summary>
            This will check the <see cref="T:System.Threading.Tasks.ValueTask"/> returned
            by a method and ensure it didn't run any async methods.
            It then calls GetAwaiter().GetResult() which will
            bubble up an exception if there is one
            </summary>
            <param name="valueTask">The ValueTask from a method that didn't call any async methods</param>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.Extensions.ValueTaskSyncCheckers.CheckSyncValueTaskWorkedAndReturnResult``1(System.Threading.Tasks.ValueTask{``0})">
            <summary>
            This will check the <see cref="T:System.Threading.Tasks.ValueTask`1"/> returned
            by a method and ensure it didn't run any async methods.
            It then calls GetAwaiter().GetResult() to return the result
            Calling .GetResult() will also bubble up an exception if there is one
            </summary>
            <param name="valueTask">The ValueTask from a method that didn't call any async methods</param>
            <returns>The result returned by the method</returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.SimpleIdComponents.op_Equality(OpenActive.Server.NET.OpenBookingHelper.SimpleIdComponents,OpenActive.Server.NET.OpenBookingHelper.SimpleIdComponents)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.SimpleIdComponents.op_Inequality(OpenActive.Server.NET.OpenBookingHelper.SimpleIdComponents,OpenActive.Server.NET.OpenBookingHelper.SimpleIdComponents)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.SimpleIdComponents.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.SimpleIdComponents.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:OpenActive.Server.NET.OpenBookingHelper.NullBookableIdComponents">
            <summary>
            Class to represent unrecognised OrderItems
            </summary>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.BookablePairIdTemplateWithOfferInheritance`1.GetOpportunityReference(System.Uri,System.Uri)">
            <summary>
            This is used by the booking engine to resolve an OrderItem to its components, using only opportunityId and Uri offerId
            </summary>
            <param name="opportunityId"></param>
            <param name="offerId"></param>
            <returns>Null if either ID does not match the template for the Opportunity, with its own Offer or the Offer of its parent</returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.BookablePairIdTemplate`1.GetOpportunityReference(System.Uri,System.Uri)">
            <summary>
            This is used by the booking engine to resolve an OrderItem to its components, using only opportunityId and Uri offerId
            </summary>
            <param name="opportunityId"></param>
            <param name="offerId"></param>
            <returns>Null if either ID does not match the template</returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.BookablePairIdTemplate`1.GetOpportunityBookableIdComponents(System.Uri)">
            <summary>
            This is used by the booking engine to resolve a bookable Opportunity ID to its components
            </summary>
            <param name="opportunityId"></param>
            <returns>Null if the ID does not match the template</returns>
        </member>
        <member name="T:OpenActive.Server.NET.OpenBookingHelper.IdTemplate`1">
            <summary>
            Id transforms provide strongly typed
            </summary>
        </member>
        <member name="P:OpenActive.Server.NET.OpenBookingHelper.IdTemplate`1.RequiredBaseUrl">
            <summary>
            If the RequiredBaseUrl is set, an exception is thrown where the {BaseUrl} does not match this value.
            </summary>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.IdTemplate`1.GetIdComponents(System.String,System.Uri[])">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.ModelSupport`1.RenderOpportunityId(`0)">
            <summary>
            Use OpportunityType from components
            </summary>
            <param name="components"></param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.ModelSupport`1.RenderOfferId(`0)">
            <summary>
            Use OpportunityType from components
            </summary>
            <param name="components"></param>
            <returns></returns>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.OrdersRPDEFeedGenerator.#ctor">
            <summary>
            This class is not designed to be used outside of the library, one of its subclasses must be used instead
            </summary>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.OpportunityDataRpdeFeedGenerator`2.#ctor">
            <summary>
            This class is not designed to be used outside of the library, one of its subclasses must be used instead
            </summary>
        </member>
        <member name="M:OpenActive.Server.NET.OpenBookingHelper.RpdeOrderingStrategyRouter.GetRpdePage(OpenActive.Server.NET.OpenBookingHelper.IRpdeFeedGenerator,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64})">
            <summary>
            This method provides simple routing for the RPDE generator based on the subclasses defined
            </summary>
            <param name="feedidentifier"></param>
            <param name="generator"></param>
            <param name="afterTimestamp"></param>
            <param name="afterId"></param>
            <param name="afterChangeNumber"></param>
            <returns></returns>
        </member>
        <member name="T:OpenActive.Server.NET.OpenBookingHelper.BookingEngineSettings">
            <summary>
            QUESTION: Should this be an interface? How do we use the settings pattern?
            </summary>
        </member>
        <member name="P:OpenActive.Server.NET.OpenBookingHelper.BookingEngineSettings.IdConfiguration">
            <summary>
            This Dictionary maps pairs of JSON-LD IDs to strongly typed classes containing their components.
            It is used by the booking engine to validate and transform IDs provided by the Broker.
            
            The classes are POCO simply implementing the IBookablePairIdTemplate interface.
            
            The first ID is for the opportunity, the second ID is for the offer.
            </summary>
        </member>
        <member name="P:OpenActive.Server.NET.OpenBookingHelper.BookingEngineSettings.RPDEPageCacheDuration">
            <summary>
            TTL in the Cache-Control header for all RPDE pages that contain greater than zero items
            See https://developer.openactive.io/publishing-data/data-feeds/scaling-feeds for CDN configuration instructions
            </summary>
        </member>
        <member name="P:OpenActive.Server.NET.OpenBookingHelper.BookingEngineSettings.RPDELastPageCacheDuration">
            <summary>
            TTL in the Cache-Control header for all RPDE pages that contain zero items
            See https://developer.openactive.io/publishing-data/data-feeds/scaling-feeds for CDN configuration instructions
            </summary>
        </member>
        <member name="P:OpenActive.Server.NET.OpenBookingHelper.BookingEngineSettings.DatasetSiteCacheDuration">
            <summary>
            TTL in the Cache-Control header for the dataset site
            See https://developer.openactive.io/publishing-data/data-feeds/scaling-feeds for CDN configuration instructions
            </summary>
        </member>
        <member name="T:OpenActive.Server.NET.StoreBooking.IOrderItemCustomContext">
            <summary>
            Useful for passing state through the flow
            </summary>
        </member>
        <member name="T:OpenActive.Server.NET.StoreBooking.StoreBookingEngine">
            <summary>
            The StoreBookingEngine provides a more opinionated implementation of the Open Booking API on top of AbstractBookingEngine.
            This is designed to be quick to implement, but may not fit the needs of more complex systems.
            
            It is not designed to be subclassed (it could be sealed?), but instead the implementer is encouraged
            to implement and provide an IOpenBookingStore on instantiation. 
            </summary>
        </member>
        <member name="M:OpenActive.Server.NET.StoreBooking.StoreBookingEngine.#ctor(OpenActive.Server.NET.OpenBookingHelper.BookingEngineSettings,OpenActive.DatasetSite.NET.DatasetSiteGeneratorSettings,OpenActive.Server.NET.StoreBooking.StoreBookingEngineSettings)">
            <summary>
            Simple constructor
            </summary>
            <param name="settings">settings are used exclusively by the AbstractBookingEngine</param>
            <param name="datasetSettings">datasetSettings are used exclusively by the DatasetSiteGenerator</param>
            <param name="storeBookingEngineSettings">storeBookingEngineSettings used exclusively by the StoreBookingEngine</param>
        </member>
        <member name="M:OpenActive.Server.NET.StoreBooking.IOpportunityStore.BookOrderItems(System.Collections.Generic.List{OpenActive.Server.NET.StoreBooking.IOrderItemContext},OpenActive.Server.NET.StoreBooking.StoreBookingFlowContext,OpenActive.Server.NET.StoreBooking.IStateContext,OpenActive.Server.NET.StoreBooking.IDatabaseTransaction)">
            <summary>
            BookOrderItems will always succeed or throw an error on failure.
            Note that responseOrderItems provided by GetOrderItems are supplied for cases where Sales Invoices or other audit records
            need to be written that require prices. As GetOrderItems occurs outside of the transaction.
            </summary>
        </member>
        <member name="M:OpenActive.Server.NET.StoreBooking.IOpportunityStore.ProposeOrderItems(System.Collections.Generic.List{OpenActive.Server.NET.StoreBooking.IOrderItemContext},OpenActive.Server.NET.StoreBooking.StoreBookingFlowContext,OpenActive.Server.NET.StoreBooking.IStateContext,OpenActive.Server.NET.StoreBooking.IDatabaseTransaction)">
            <summary>
            ProposeOrderItems will always succeed or throw an error on failure.
            Note that responseOrderItems provided by GetOrderItems are supplied for cases where Sales Invoices or other audit records
            need to be written that require prices. As GetOrderItems occurs outside of the transaction.
            </summary>
        </member>
        <member name="T:OpenActive.Server.NET.StoreBooking.DeleteOrderResult">
            <summary>
            Result of deleting (or attempting to delete) an Order in a store
            </summary>
        </member>
        <member name="M:OpenActive.Server.NET.StoreBooking.IOrderStore.BeginOrderTransaction(OpenActive.Server.NET.OpenBookingHelper.FlowStage)">
            <summary>
            Stage is provided as it depending on the implementation (e.g. what level of leasing is applied)
            it might not be appropriate to create transactions for all stages.
            Null can be returned in the case that a transaction has not been created.
            </summary>
            <param name="stage"></param>
            <returns></returns>
        </member>
    </members>
</doc>
